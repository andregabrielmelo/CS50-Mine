sort1 uses: Bubble Sort

How do you know?: Performed the worst in reverse order(n^2) and best in sorted order(n). Best in sorted order, same time as selection sort in reversed order, and in beetween merge sort and selection sort in order cases

sort2 uses: Merge Sort

How do you know?: It takes the same time whatever the circumstances(n log n). The second best in sorted order, and the best in reversed order

sort3 uses: Selection Sort

How do you know?: It's best and worst situation takes the same amount of time(n^2). Generally the worst

in random5000.txt
{
    sort1
    {
        real    0m0.079s
        user    0m0.050s
        sys     0m0.020s
    }

    sort2
    {
        real    0m0.036s
        user    0m0.000s
        sys     0m0.023s
    }

    sort3
    {
        real    0m0.078s
        user    0m0.025s
        sys     0m0.024s
    }
}

in random10000.txt
{
    sort1
    {
        real    0m0.301s
        user    0m0.250s
        sys     0m0.036s
    }

    sort2
    {
        real    0m0.077s
        user    0m0.009s
        sys     0m0.037s
    }

    sort3
    {
        real    0m0.174s
        user    0m0.112s
        sys     0m0.036s
    }
}

in random50000.txt
{
    sort1
    {
        real    0m7.753s
        user    0m6.898s
        sys     0m0.190s
    }

    sort2
    {
        real    0m0.937s
        user    0m0.034s
        sys     0m0.179s
    }

    sort3
    {
        real    0m3.493s
        user    0m2.582s
        sys     0m0.198s
    }
}

reversed5000.txt
{
    sort1
    {
        real    0m0.119s
        user    0m0.082s
        sys     0m0.008s
    }

    sort2
    {
        real    0m0.039s
        user    0m0.006s
        sys     0m0.018s
    }

    sort3
    {
        real    0m0.051s
        user    0m0.032s
        sys     0m0.016s
    }
}

reversed10000.txt
{
    sort1
    {
        real    0m0.246s
        user    0m0.198s
        sys     0m0.036s
    }

    sort2
    {
        real    0m0.055s
        user    0m0.007s
        sys     0m0.034s
    }

    sort3
    {
        real    0m0.208s
        user    0m0.099s
        sys     0m0.052s
    }
}

reversed50000.txt
{
    sort1
    {
        real    0m5.802s
        user    0m5.056s
        sys     0m0.188s
    }

    sort2
    {
        real    0m0.630s
        user    0m0.054s
        sys     0m0.150s
    }

    sort3
    {
        real    0m3.259s
        user    0m2.728s
        sys     0m0.121s
    }
}

sorted5000.txt
{
    sort1
    {
        real    0m0.022s
        user    0m0.011s
        sys     0m0.011s
    }

    sort2
    {
        real    0m0.023s
        user    0m0.005s
        sys     0m0.016s
    }

    sort3
    {
        real    0m0.050s
        user    0m0.036s
        sys     0m0.011s
    }
}

sorted10000.txt
{
    sort1
    {
        real    0m0.045s
        user    0m0.012s
        sys     0m0.027s
    }

    sort2
    {
        real    0m0.057s
        user    0m0.007s
        sys     0m0.037s
    }

    sort3
    {
        real    0m0.170s
        user    0m0.104s
        sys     0m0.041s
    }
}

sorted50000.txt
{
    sort1
    {
        real    0m1.119s
        user    0m0.045s
        sys     0m0.133s
    }

    sort2
    {
        real    0m1.076s
        user    0m0.052s
        sys     0m0.132s
    }

    sort3
    {
        real    0m3.684s
        user    0m2.683s
        sys     0m0.123s
    }
}
